#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require "bundler/setup"
require "handle_rest"

verbose = false
products = false
components = false
individuals = false
institutions = false

options = OpenStruct.new
option_parser = OptionParser.new do |opts| # rubocop:disable Metrics/BlockLength
  opts.banner = "Usage: #{$PROGRAM_NAME} -v -p -c -d -s [-b <base>] [-t <token>]"
  opts.on('-v', '--verbose', 'Verbose') do
    verbose = true
  end
  opts.on('-p', '--products', 'Products') do
    products = true
  end
  opts.on('-c', '--components', 'Components') do
    components = true
  end
  opts.on('-d', '--individuals', 'Individuals') do
    individuals = true
  end
  opts.on('-s', '--institutions', 'Institutions') do
    institutions = true
  end
  opts.on('-b', '--base [url]', 'URL to api') do |url|
    options.base = url
  end
  opts.on('-t', '--token [jwt]', 'JWT token') do |jwt|
    options.token = jwt
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)

# if ARGV.empty?
#   puts option_parser.help
# else
begin
  puts options if verbose
  service = Turnsole::Heliotrope::Service.new(options)
  response = {}
  response["products"] = service.products if products
  response["components"] = service.components if components
  response["individuals"] = service.individuals if individuals
  response["institutions"] = service.institutions if institutions
  puts response
rescue StandardError => e
  warn e.message
end
exit!(0)
# end
